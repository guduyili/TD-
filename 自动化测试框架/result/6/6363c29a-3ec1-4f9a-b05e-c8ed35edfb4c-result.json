{"name": "test_steps_demo[allure]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nCurrent browser version is 130.0.6723.117 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0118A813+48355]\n\t(No symbol) [0x0111C4B1]\n\t(No symbol) [0x01025358]\n\t(No symbol) [0x010461AC]\n\t(No symbol) [0x01041EF3]\n\t(No symbol) [0x01040579]\n\t(No symbol) [0x01070C55]\n\t(No symbol) [0x0107093C]\n\t(No symbol) [0x0106A536]\n\t(No symbol) [0x010482DC]\n\t(No symbol) [0x010493DD]\n\tGetHandleVerifier [0x013EAABD+2539405]\n\tGetHandleVerifier [0x0142A78F+2800735]\n\tGetHandleVerifier [0x0142456C+2775612]\n\tGetHandleVerifier [0x012151E0+616112]\n\t(No symbol) [0x01125F8C]\n\t(No symbol) [0x01122328]\n\t(No symbol) [0x0112240B]\n\t(No symbol) [0x01114FF7]\n\tBaseThreadInitThunk [0x77867BA9+25]\n\tRtlInitializeExceptionChain [0x77C2C0CB+107]\n\tRtlClearBits [0x77C2C04F+191]", "trace": "test_data1 = 'allure'\n\n    @allure.testcase(\"http://www.github.com\")\n    @allure.feature(\"百度搜索\")\n    @pytest.mark.parametrize('test_data1', ['allure', 'pytest', 'unittest'])\n    def test_steps_demo(test_data1):\n        with allure.step(\"打开百度网页\"):\n            options = Options()\n            service = Service(\"C:/Testing_tools/chromedriver_win32/chromedriver.exe\")\n>           driver = webdriver.Chrome(service=service, options=options)\n\ntest_allure_baidu.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nD:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nD:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:238: in __init__\n    self.start_session(capabilities)\nD:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:325: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nD:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000279607AA630>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...dInitThunk [0x77867BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77C2C0CB+107]\\\\n\\\\tRtlClearBits [0x77C2C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nE       Current browser version is 130.0.6723.117 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0118A813+48355]\nE       \t(No symbol) [0x0111C4B1]\nE       \t(No symbol) [0x01025358]\nE       \t(No symbol) [0x010461AC]\nE       \t(No symbol) [0x01041EF3]\nE       \t(No symbol) [0x01040579]\nE       \t(No symbol) [0x01070C55]\nE       \t(No symbol) [0x0107093C]\nE       \t(No symbol) [0x0106A536]\nE       \t(No symbol) [0x010482DC]\nE       \t(No symbol) [0x010493DD]\nE       \tGetHandleVerifier [0x013EAABD+2539405]\nE       \tGetHandleVerifier [0x0142A78F+2800735]\nE       \tGetHandleVerifier [0x0142456C+2775612]\nE       \tGetHandleVerifier [0x012151E0+616112]\nE       \t(No symbol) [0x01125F8C]\nE       \t(No symbol) [0x01122328]\nE       \t(No symbol) [0x0112240B]\nE       \t(No symbol) [0x01114FF7]\nE       \tBaseThreadInitThunk [0x77867BA9+25]\nE       \tRtlInitializeExceptionChain [0x77C2C0CB+107]\nE       \tRtlClearBits [0x77C2C04F+191]\n\nD:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "steps": [{"name": "打开百度网页", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nCurrent browser version is 130.0.6723.117 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0118A813+48355]\n\t(No symbol) [0x0111C4B1]\n\t(No symbol) [0x01025358]\n\t(No symbol) [0x010461AC]\n\t(No symbol) [0x01041EF3]\n\t(No symbol) [0x01040579]\n\t(No symbol) [0x01070C55]\n\t(No symbol) [0x0107093C]\n\t(No symbol) [0x0106A536]\n\t(No symbol) [0x010482DC]\n\t(No symbol) [0x010493DD]\n\tGetHandleVerifier [0x013EAABD+2539405]\n\tGetHandleVerifier [0x0142A78F+2800735]\n\tGetHandleVerifier [0x0142456C+2775612]\n\tGetHandleVerifier [0x012151E0+616112]\n\t(No symbol) [0x01125F8C]\n\t(No symbol) [0x01122328]\n\t(No symbol) [0x0112240B]\n\t(No symbol) [0x01114FF7]\n\tBaseThreadInitThunk [0x77867BA9+25]\n\tRtlInitializeExceptionChain [0x77C2C0CB+107]\n\tRtlClearBits [0x77C2C04F+191]\n\n", "trace": "  File \"D:\\PYPro\\Py_Td\\自动化测试框架\\test_allure_baidu.py\", line 17, in test_steps_demo\n    driver = webdriver.Chrome(service=service, options=options)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"D:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"D:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 238, in __init__\n    self.start_session(capabilities)\n  File \"D:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 325, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 380, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\python 3.12.4\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1731655579898, "stop": 1731655583658}], "parameters": [{"name": "test_data1", "value": "'allure'"}], "start": 1731655579898, "stop": 1731655583661, "uuid": "a5b9878b-da90-413e-bead-f09557604c6d", "historyId": "7fc0792e3a025e83aa515929ffced7a6", "testCaseId": "f4fee6a98d081c6599e987c081a66185", "fullName": "test_allure_baidu#test_steps_demo", "labels": [{"name": "feature", "value": "百度搜索"}, {"name": "suite", "value": "test_allure_baidu"}, {"name": "host", "value": "孤独二里"}, {"name": "thread", "value": "2404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_allure_baidu"}], "links": [{"type": "tms", "url": "http://www.github.com", "name": "http://www.github.com"}]}